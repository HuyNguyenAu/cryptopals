{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2","program":"C:\\Users\\Huy\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","hex","C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=acc7e996989841f7","-C","extra-filename=-acc7e996989841f7","--out-dir","D:\\Eclipse Workspace Rust\\set_1\\target\\rls\\debug\\deps","-L","dependency=D:\\Eclipse Workspace Rust\\set_1\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Huy\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc"],"output":"D:\\Eclipse Workspace Rust\\set_1\\target\\rls\\debug\\deps\\libhex-acc7e996989841f7.rmeta"},"prelude":{"crate_id":{"name":"hex","disambiguator":[2928603225889231324,13959195282889693745]},"crate_root":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src","external_crates":[{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[2953284957370121905,516218847044108999]}},{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[4886921161452974022,9452701908620647308]}},{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[3203561457090851205,4632072058037203867]}},{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[3169376498131592849,9803978538207206865]}},{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[9199649512872691809,295485750221223515]}},{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[8443236399884245798,5222098755004489868]}},{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[6875631416372754603,10839808870381595949]}},{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[1502820548942319655,12324332090615114041]}},{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[430706850608609257,9838809896428719127]}},{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[14503357713055743246,17731918345561731946]}},{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[5693586899772496405,17220236988479499600]}},{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[1060170945230123807,4750192540160149325]}},{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[5837979218880944404,14867613958503134191]}}],"span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":0,"byte_end":11473,"line_start":1,"line_end":406,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":0,"byte_end":11473,"line_start":1,"line_end":406,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":10},{"krate":0,"index":14},{"krate":0,"index":45},{"krate":0,"index":60},{"krate":0,"index":58},{"krate":0,"index":57},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":24},{"krate":0,"index":26},{"krate":0,"index":28},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":38},{"krate":0,"index":62},{"krate":0,"index":68},{"krate":0,"index":74},{"krate":0,"index":80},{"krate":0,"index":86},{"krate":0,"index":92},{"krate":0,"index":98},{"krate":0,"index":104},{"krate":0,"index":110},{"krate":0,"index":116},{"krate":0,"index":122},{"krate":0,"index":128},{"krate":0,"index":134},{"krate":0,"index":140},{"krate":0,"index":146},{"krate":0,"index":152},{"krate":0,"index":158},{"krate":0,"index":164},{"krate":0,"index":170},{"krate":0,"index":176},{"krate":0,"index":182},{"krate":0,"index":188},{"krate":0,"index":194},{"krate":0,"index":200},{"krate":0,"index":206},{"krate":0,"index":212},{"krate":0,"index":218},{"krate":0,"index":224},{"krate":0,"index":230},{"krate":0,"index":236},{"krate":0,"index":242},{"krate":0,"index":248},{"krate":0,"index":254},{"krate":0,"index":260},{"krate":0,"index":266},{"krate":0,"index":272},{"krate":0,"index":278},{"krate":0,"index":284},{"krate":0,"index":290},{"krate":0,"index":296},{"krate":0,"index":302},{"krate":0,"index":308},{"krate":0,"index":314},{"krate":0,"index":320},{"krate":0,"index":326},{"krate":0,"index":332},{"krate":0,"index":338},{"krate":0,"index":344},{"krate":0,"index":350},{"krate":0,"index":356},{"krate":0,"index":362},{"krate":0,"index":368},{"krate":0,"index":374},{"krate":0,"index":380},{"krate":0,"index":386},{"krate":0,"index":392},{"krate":0,"index":398},{"krate":0,"index":404},{"krate":0,"index":410},{"krate":0,"index":416},{"krate":0,"index":422},{"krate":0,"index":428},{"krate":0,"index":434},{"krate":0,"index":440},{"krate":0,"index":446},{"krate":0,"index":452},{"krate":0,"index":458},{"krate":0,"index":464},{"krate":0,"index":470},{"krate":0,"index":476},{"krate":0,"index":482},{"krate":0,"index":488},{"krate":0,"index":494},{"krate":0,"index":500},{"krate":0,"index":506},{"krate":0,"index":512},{"krate":0,"index":518},{"krate":0,"index":524},{"krate":0,"index":530},{"krate":0,"index":536},{"krate":0,"index":542},{"krate":0,"index":548},{"krate":0,"index":554},{"krate":0,"index":560},{"krate":0,"index":566},{"krate":0,"index":572},{"krate":0,"index":578},{"krate":0,"index":584},{"krate":0,"index":590},{"krate":0,"index":596},{"krate":0,"index":602},{"krate":0,"index":608},{"krate":0,"index":614},{"krate":0,"index":620},{"krate":0,"index":626},{"krate":0,"index":632},{"krate":0,"index":638},{"krate":0,"index":644},{"krate":0,"index":650},{"krate":0,"index":656},{"krate":0,"index":662},{"krate":0,"index":668},{"krate":0,"index":674},{"krate":0,"index":680},{"krate":0,"index":686},{"krate":0,"index":692},{"krate":0,"index":698},{"krate":0,"index":704},{"krate":0,"index":710},{"krate":0,"index":716},{"krate":0,"index":722},{"krate":0,"index":728},{"krate":0,"index":734},{"krate":0,"index":740},{"krate":0,"index":746},{"krate":0,"index":752},{"krate":0,"index":758},{"krate":0,"index":764},{"krate":0,"index":770},{"krate":0,"index":776},{"krate":0,"index":782},{"krate":0,"index":788},{"krate":0,"index":794},{"krate":0,"index":800},{"krate":0,"index":806},{"krate":0,"index":812},{"krate":0,"index":818},{"krate":0,"index":824},{"krate":0,"index":830},{"krate":0,"index":836},{"krate":0,"index":842},{"krate":0,"index":848},{"krate":0,"index":854},{"krate":0,"index":860},{"krate":0,"index":866},{"krate":0,"index":872},{"krate":0,"index":878},{"krate":0,"index":884},{"krate":0,"index":890},{"krate":0,"index":896},{"krate":0,"index":902},{"krate":0,"index":908},{"krate":0,"index":914},{"krate":0,"index":920},{"krate":0,"index":926},{"krate":0,"index":932},{"krate":0,"index":938},{"krate":0,"index":944},{"krate":0,"index":950},{"krate":0,"index":956},{"krate":0,"index":962},{"krate":0,"index":968},{"krate":0,"index":974},{"krate":0,"index":980},{"krate":0,"index":986},{"krate":0,"index":992},{"krate":0,"index":998},{"krate":0,"index":1004},{"krate":0,"index":1010},{"krate":0,"index":39},{"krate":0,"index":41},{"krate":0,"index":43}],"decl_id":null,"docs":" Encoding and decoding hex strings.","sig":null,"attributes":[{"value":"! Encoding and decoding hex strings.","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":464,"byte_end":502,"line_start":11,"line_end":11,"column_start":1,"column_end":39}},{"value":"!","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":503,"byte_end":506,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"! For most cases, you can simply use the `decode()`, `encode()` and","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":507,"byte_end":576,"line_start":13,"line_end":13,"column_start":1,"column_end":70}},{"value":"! `encode_upper()` functions. If you need a bit more control, use the traits","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":577,"byte_end":655,"line_start":14,"line_end":14,"column_start":1,"column_end":79}},{"value":"! `ToHex` and `FromHex` instead.","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":656,"byte_end":690,"line_start":15,"line_end":15,"column_start":1,"column_end":35}},{"value":"!","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":691,"byte_end":694,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"! # Example","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":695,"byte_end":708,"line_start":17,"line_end":17,"column_start":1,"column_end":14}},{"value":"!","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":709,"byte_end":712,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":713,"byte_end":720,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"! extern crate hex;","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":721,"byte_end":742,"line_start":20,"line_end":20,"column_start":1,"column_end":22}},{"value":"!","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":743,"byte_end":746,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"! fn main() {","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":747,"byte_end":762,"line_start":22,"line_end":22,"column_start":1,"column_end":16}},{"value":"!     let hex_string = hex::encode(\"Hello world!\");","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":763,"byte_end":816,"line_start":23,"line_end":23,"column_start":1,"column_end":54}},{"value":"!     println!(\"{}\", hex_string); // Prints '48656c6c6f20776f726c6421'","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":817,"byte_end":889,"line_start":24,"line_end":24,"column_start":1,"column_end":73}},{"value":"! }","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":890,"byte_end":895,"line_start":25,"line_end":25,"column_start":1,"column_end":6}},{"value":"! ```","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":896,"byte_end":903,"line_start":26,"line_end":26,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":5},"span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":1357,"byte_end":1362,"line_start":47,"line_end":47,"column_start":11,"column_end":16},"name":"ToHex","qualname":"::ToHex","value":"ToHex","parent":null,"children":[{"krate":0,"index":6},{"krate":0,"index":8}],"decl_id":null,"docs":" Encoding values as hex string.","sig":null,"attributes":[{"value":"/ Encoding values as hex string.","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":936,"byte_end":970,"line_start":31,"line_end":31,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":971,"byte_end":974,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ This trait is implemented for all `T` which implement `AsRef<[u8]>`. This","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":975,"byte_end":1052,"line_start":33,"line_end":33,"column_start":1,"column_end":78}},{"value":"/ includes `String`, `str`, `Vec<u8>` and `[u8]`.","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":1053,"byte_end":1104,"line_start":34,"line_end":34,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":1105,"byte_end":1108,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":1109,"byte_end":1122,"line_start":36,"line_end":36,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":1123,"byte_end":1126,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":1127,"byte_end":1134,"line_start":38,"line_end":38,"column_start":1,"column_end":8}},{"value":"/ use hex::ToHex;","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":1135,"byte_end":1154,"line_start":39,"line_end":39,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":1155,"byte_end":1158,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ let mut s = String::new();","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":1159,"byte_end":1189,"line_start":41,"line_end":41,"column_start":1,"column_end":31}},{"value":"/ \"Hello world!\".write_hex(&mut s).unwrap();","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":1190,"byte_end":1236,"line_start":42,"line_end":42,"column_start":1,"column_end":47}},{"value":"/ println!(\"{}\", s);","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":1237,"byte_end":1259,"line_start":43,"line_end":43,"column_start":1,"column_end":23}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":1260,"byte_end":1267,"line_start":44,"line_end":44,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":1268,"byte_end":1271,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ *Note*: instead of using this trait, you might want to use `encode()`.","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":1272,"byte_end":1346,"line_start":46,"line_end":46,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":6},"span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":1485,"byte_end":1494,"line_start":50,"line_end":50,"column_start":8,"column_end":17},"name":"write_hex","qualname":"::ToHex::write_hex","value":"fn <W> (&self, w: &mut W) -> fmt::Result","parent":{"krate":0,"index":5},"children":[],"decl_id":null,"docs":" Writes the hex string representing `self` into `w`. Lower case letters\n are used (e.g. `f9b4ca`).\n","sig":null,"attributes":[{"value":"/ Writes the hex string representing `self` into `w`. Lower case letters","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":1369,"byte_end":1443,"line_start":48,"line_end":48,"column_start":5,"column_end":79}},{"value":"/ are used (e.g. `f9b4ca`).","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":1448,"byte_end":1477,"line_start":49,"line_end":49,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":8},"span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":1665,"byte_end":1680,"line_start":54,"line_end":54,"column_start":8,"column_end":23},"name":"write_hex_upper","qualname":"::ToHex::write_hex_upper","value":"fn <W> (&self, w: &mut W) -> fmt::Result","parent":{"krate":0,"index":5},"children":[],"decl_id":null,"docs":" Writes the hex string representing `self` into `w`. Upper case letters\n are used (e.g. `F9B4CA`).\n","sig":null,"attributes":[{"value":"/ Writes the hex string representing `self` into `w`. Upper case letters","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":1549,"byte_end":1623,"line_start":52,"line_end":52,"column_start":5,"column_end":79}},{"value":"/ are used (e.g. `F9B4CA`).","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":1628,"byte_end":1657,"line_start":53,"line_end":53,"column_start":5,"column_end":34}}]},{"kind":"StructVariant","id":{"krate":0,"index":46},"span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":2655,"byte_end":2674,"line_start":87,"line_end":87,"column_start":5,"column_end":24},"name":"InvalidHexCharacter","qualname":"::FromHexError::InvalidHexCharacter","value":"FromHexError::InvalidHexCharacter { c, index }","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":" An invalid character was found. Valid ones are: `0...9`, `a...f`\n or `A...F`.\n","sig":null,"attributes":[{"value":"/ An invalid character was found. Valid ones are: `0...9`, `a...f`","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":2562,"byte_end":2630,"line_start":85,"line_end":85,"column_start":5,"column_end":73}},{"value":"/ or `A...F`.","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":2635,"byte_end":2650,"line_start":86,"line_end":86,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":49},"span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":2822,"byte_end":2831,"line_start":94,"line_end":94,"column_start":5,"column_end":14},"name":"OddLength","qualname":"::FromHexError::OddLength","value":"FromHexError::OddLength","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":" A hex string's length needs to be even, as two digits correspond to\n one byte.\n","sig":null,"attributes":[{"value":"/ A hex string's length needs to be even, as two digits correspond to","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":2728,"byte_end":2799,"line_start":92,"line_end":92,"column_start":5,"column_end":76}},{"value":"/ one byte.","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":2804,"byte_end":2817,"line_start":93,"line_end":93,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":51},"span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":3004,"byte_end":3023,"line_start":99,"line_end":99,"column_start":5,"column_end":24},"name":"InvalidStringLength","qualname":"::FromHexError::InvalidStringLength","value":"FromHexError::InvalidStringLength","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":" If the hex string is decoded into a fixed sized container, such as an\n array, the hex string's length * 2 has to match the container's\n length.\n","sig":null,"attributes":[{"value":"/ If the hex string is decoded into a fixed sized container, such as an","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":2838,"byte_end":2911,"line_start":96,"line_end":96,"column_start":5,"column_end":78}},{"value":"/ array, the hex string's length * 2 has to match the container's","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":2916,"byte_end":2983,"line_start":97,"line_end":97,"column_start":5,"column_end":72}},{"value":"/ length.","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":2988,"byte_end":2999,"line_start":98,"line_end":98,"column_start":5,"column_end":16}}]},{"kind":"Enum","id":{"krate":0,"index":45},"span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":2543,"byte_end":2555,"line_start":84,"line_end":84,"column_start":10,"column_end":22},"name":"FromHexError","qualname":"::FromHexError","value":"FromHexError::{InvalidHexCharacter, OddLength, InvalidStringLength}","parent":null,"children":[{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":51}],"decl_id":null,"docs":" The error type for decoding a hex string into `Vec<u8>` or `[u8; N]`.\n","sig":null,"attributes":[{"value":"/ The error type for decoding a hex string into `Vec<u8>` or `[u8; N]`.","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":2419,"byte_end":2492,"line_start":82,"line_end":82,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":28},"span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":4263,"byte_end":4270,"line_start":146,"line_end":146,"column_start":11,"column_end":18},"name":"FromHex","qualname":"::FromHex","value":"FromHex: Sized","parent":null,"children":[{"krate":0,"index":29},{"krate":0,"index":30}],"decl_id":null,"docs":" Types that can be decoded from a hex string.","sig":null,"attributes":[{"value":"/ Types that can be decoded from a hex string.","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":3825,"byte_end":3873,"line_start":126,"line_end":126,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":3874,"byte_end":3877,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ This trait is implemented for `Vec<u8>` and small `u8`-arrays.","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":3878,"byte_end":3944,"line_start":128,"line_end":128,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":3945,"byte_end":3948,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":3949,"byte_end":3962,"line_start":130,"line_end":130,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":3963,"byte_end":3966,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":3967,"byte_end":3974,"line_start":132,"line_end":132,"column_start":1,"column_end":8}},{"value":"/ use hex::FromHex;","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":3975,"byte_end":3996,"line_start":133,"line_end":133,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":3997,"byte_end":4000,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ match Vec::from_hex(\"48656c6c6f20776f726c6421\") {","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":4001,"byte_end":4054,"line_start":135,"line_end":135,"column_start":1,"column_end":54}},{"value":"/     Ok(vec) => {","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":4055,"byte_end":4075,"line_start":136,"line_end":136,"column_start":1,"column_end":21}},{"value":"/         for b in vec {","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":4076,"byte_end":4102,"line_start":137,"line_end":137,"column_start":1,"column_end":27}},{"value":"/             println!(\"{}\", b as char);","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":4103,"byte_end":4145,"line_start":138,"line_end":138,"column_start":1,"column_end":43}},{"value":"/         }","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":4146,"byte_end":4159,"line_start":139,"line_end":139,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":4160,"byte_end":4169,"line_start":140,"line_end":140,"column_start":1,"column_end":10}},{"value":"/     Err(e) => {","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":4170,"byte_end":4189,"line_start":141,"line_end":141,"column_start":1,"column_end":20}},{"value":"/         // Deal with the error ...","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":4190,"byte_end":4228,"line_start":142,"line_end":142,"column_start":1,"column_end":39}},{"value":"/     }","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":4229,"byte_end":4238,"line_start":143,"line_end":143,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":4239,"byte_end":4244,"line_start":144,"line_end":144,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":4245,"byte_end":4252,"line_start":145,"line_end":145,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":29},"span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":4289,"byte_end":4294,"line_start":147,"line_end":147,"column_start":10,"column_end":15},"name":"Error","qualname":"::FromHex::Error","value":"type Error;","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":4573,"byte_end":4581,"line_start":154,"line_end":154,"column_start":8,"column_end":16},"name":"from_hex","qualname":"::FromHex::from_hex","value":"fn <T> (hex: T) -> Result<Self, Self::Error>","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" Creates an instance of type `Self` from the given hex string, or fails\n with a custom error type.","sig":null,"attributes":[{"value":"/ Creates an instance of type `Self` from the given hex string, or fails","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":4301,"byte_end":4375,"line_start":149,"line_end":149,"column_start":5,"column_end":79}},{"value":"/ with a custom error type.","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":4380,"byte_end":4409,"line_start":150,"line_end":150,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":4414,"byte_end":4417,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ Both, upper and lower case characters are valid and can even be","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":4422,"byte_end":4489,"line_start":152,"line_end":152,"column_start":5,"column_end":72}},{"value":"/ mixed (e.g. `f9b4ca`, `F9B4CA` and `f9B4Ca` are all valid strings).","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":4494,"byte_end":4565,"line_start":153,"line_end":153,"column_start":5,"column_end":76}}]},{"kind":"Function","id":{"krate":0,"index":39},"span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":7679,"byte_end":7685,"line_start":251,"line_end":251,"column_start":8,"column_end":14},"name":"encode","qualname":"::encode","value":"fn <T> (data: T) -> String","parent":null,"children":[],"decl_id":null,"docs":" Encodes `data` as hex string using lowercase characters.","sig":null,"attributes":[{"value":"/ Encodes `data` as hex string using lowercase characters.","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":7178,"byte_end":7238,"line_start":238,"line_end":238,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":7239,"byte_end":7242,"line_start":239,"line_end":239,"column_start":1,"column_end":4}},{"value":"/ Lowercase characters are used (e.g. `f9b4ca`). The resulting string's","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":7243,"byte_end":7316,"line_start":240,"line_end":240,"column_start":1,"column_end":74}},{"value":"/ length is always even, each byte in `data` is always encoded using two hex","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":7317,"byte_end":7395,"line_start":241,"line_end":241,"column_start":1,"column_end":79}},{"value":"/ digits. Thus, the resulting string contains exactly twice as many bytes as","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":7396,"byte_end":7474,"line_start":242,"line_end":242,"column_start":1,"column_end":79}},{"value":"/ the input data.","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":7475,"byte_end":7494,"line_start":243,"line_end":243,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":7495,"byte_end":7498,"line_start":244,"line_end":244,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":7499,"byte_end":7512,"line_start":245,"line_end":245,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":7513,"byte_end":7516,"line_start":246,"line_end":246,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":7517,"byte_end":7524,"line_start":247,"line_end":247,"column_start":1,"column_end":8}},{"value":"/ assert_eq!(hex::encode(\"Hello world!\"), \"48656c6c6f20776f726c6421\");","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":7525,"byte_end":7597,"line_start":248,"line_end":248,"column_start":1,"column_end":73}},{"value":"/ assert_eq!(hex::encode(vec![1, 2, 3, 15, 16]), \"0102030f10\");","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":7598,"byte_end":7663,"line_start":249,"line_end":249,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":7664,"byte_end":7671,"line_start":250,"line_end":250,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":41},"span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":8234,"byte_end":8246,"line_start":269,"line_end":269,"column_start":8,"column_end":20},"name":"encode_upper","qualname":"::encode_upper","value":"fn <T> (data: T) -> String","parent":null,"children":[],"decl_id":null,"docs":" Encodes `data` as hex string using uppercase characters.","sig":null,"attributes":[{"value":"/ Encodes `data` as hex string using uppercase characters.","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":7898,"byte_end":7958,"line_start":259,"line_end":259,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":7959,"byte_end":7962,"line_start":260,"line_end":260,"column_start":1,"column_end":4}},{"value":"/ Apart from the characters' casing, this works exactly like `encode()`.","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":7963,"byte_end":8037,"line_start":261,"line_end":261,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":8038,"byte_end":8041,"line_start":262,"line_end":262,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":8042,"byte_end":8055,"line_start":263,"line_end":263,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":8056,"byte_end":8059,"line_start":264,"line_end":264,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":8060,"byte_end":8067,"line_start":265,"line_end":265,"column_start":1,"column_end":8}},{"value":"/ assert_eq!(hex::encode_upper(\"Hello world!\"), \"48656C6C6F20776F726C6421\");","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":8068,"byte_end":8146,"line_start":266,"line_end":266,"column_start":1,"column_end":79}},{"value":"/ assert_eq!(hex::encode_upper(vec![1, 2, 3, 15, 16]), \"0102030F10\");","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":8147,"byte_end":8218,"line_start":267,"line_end":267,"column_start":1,"column_end":72}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":8219,"byte_end":8226,"line_start":268,"line_end":268,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":43},"span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":8951,"byte_end":8957,"line_start":292,"line_end":292,"column_start":8,"column_end":14},"name":"decode","qualname":"::decode","value":"fn <T> (data: T) -> Result<Vec<u8>, FromHexError>","parent":null,"children":[],"decl_id":null,"docs":" Decodes a hex string into raw bytes.","sig":null,"attributes":[{"value":"/ Decodes a hex string into raw bytes.","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":8465,"byte_end":8505,"line_start":277,"line_end":277,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":8506,"byte_end":8509,"line_start":278,"line_end":278,"column_start":1,"column_end":4}},{"value":"/ Both, upper and lower case characters are valid in the input string and can","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":8510,"byte_end":8589,"line_start":279,"line_end":279,"column_start":1,"column_end":80}},{"value":"/ even be mixed (e.g. `f9b4ca`, `F9B4CA` and `f9B4Ca` are all valid strings).","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":8590,"byte_end":8669,"line_start":280,"line_end":280,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":8670,"byte_end":8673,"line_start":281,"line_end":281,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":8674,"byte_end":8687,"line_start":282,"line_end":282,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":8688,"byte_end":8695,"line_start":283,"line_end":283,"column_start":1,"column_end":8}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":8696,"byte_end":8711,"line_start":284,"line_end":284,"column_start":1,"column_end":16}},{"value":"/     hex::decode(\"48656c6c6f20776f726c6421\"),","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":8712,"byte_end":8760,"line_start":285,"line_end":285,"column_start":1,"column_end":49}},{"value":"/     Ok(\"Hello world!\".to_owned().into_bytes())","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":8761,"byte_end":8811,"line_start":286,"line_end":286,"column_start":1,"column_end":51}},{"value":"/ );","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":8812,"byte_end":8818,"line_start":287,"line_end":287,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":8819,"byte_end":8822,"line_start":288,"line_end":288,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(hex::decode(\"123\"), Err(hex::FromHexError::OddLength));","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":8823,"byte_end":8893,"line_start":289,"line_end":289,"column_start":1,"column_end":71}},{"value":"/ assert!(hex::decode(\"foo\").is_err());","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":8894,"byte_end":8935,"line_start":290,"line_end":290,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":8936,"byte_end":8943,"line_start":291,"line_end":291,"column_start":1,"column_end":8}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":2043,"byte_end":2044,"line_start":68,"line_end":68,"column_start":32,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":16},{"krate":0,"index":20}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":3050,"byte_end":3062,"line_start":102,"line_end":102,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":25}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":3379,"byte_end":3391,"line_start":113,"line_end":113,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":27}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":5006,"byte_end":5009,"line_start":171,"line_end":171,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":34},{"krate":0,"index":35}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":2043,"byte_end":2044,"line_start":68,"line_end":68,"column_start":32,"column_end":33},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":15},"to":{"krate":0,"index":5}},{"span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":3050,"byte_end":3062,"line_start":102,"line_end":102,"column_start":23,"column_end":35},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":45},"to":{"krate":1,"index":1620}},{"span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":3379,"byte_end":3391,"line_start":113,"line_end":113,"column_start":23,"column_end":35},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":45},"to":{"krate":2,"index":5928}},{"span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":4272,"byte_end":4277,"line_start":146,"line_end":146,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":2,"index":1857},"to":{"krate":0,"index":28}},{"span":{"file_name":"C:\\Users\\Huy\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":5006,"byte_end":5009,"line_start":171,"line_end":171,"column_start":18,"column_end":21},"kind":{"Impl":{"id":3}},"from":{"krate":5,"index":3899},"to":{"krate":0,"index":28}}]}